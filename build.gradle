// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {

    apply from: "dependencies.gradle"

    dependencies {
        classpath(navigation.plugin)
    }
}

plugins {
    id 'com.android.application' version "${gradlePluginVersion}" apply false
    id 'com.android.library' version "${gradlePluginVersion}" apply false
    id 'org.jetbrains.kotlin.android' version "${kotlinVersion}" apply false
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}" apply false
    id 'androidx.navigation.safeargs' version "${navigationVersion}" apply false
    id "com.github.ben-manes.versions" version "${versionCheckerPlugin}" apply true // used tu check lib version
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

// https://github.com/ben-manes/gradle-versions-plugin
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

def getLocalProperty(String propertyKey, Object defaultValue) {
    Properties properties = new Properties()
    if (project.rootProject.file('local.properties').canRead()) {
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
    }
    def value = properties.getProperty(propertyKey)
    if (value == null) {
        throw new MissingPropertyException("You should create a new field $propertyKey=\"value\" " +
                "into your local.properties file")
    }
    return properties.getProperty(propertyKey, defaultValue)
}